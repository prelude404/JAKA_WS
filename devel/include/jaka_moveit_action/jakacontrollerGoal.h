// Generated by gencpp from file jaka_moveit_action/jakacontrollerGoal.msg
// DO NOT EDIT!


#ifndef JAKA_MOVEIT_ACTION_MESSAGE_JAKACONTROLLERGOAL_H
#define JAKA_MOVEIT_ACTION_MESSAGE_JAKACONTROLLERGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jaka_moveit_action
{
template <class ContainerAllocator>
struct jakacontrollerGoal_
{
  typedef jakacontrollerGoal_<ContainerAllocator> Type;

  jakacontrollerGoal_()
    : point_count(0)
    , robot_goal()  {
    }
  jakacontrollerGoal_(const ContainerAllocator& _alloc)
    : point_count(0)
    , robot_goal(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _point_count_type;
  _point_count_type point_count;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _robot_goal_type;
  _robot_goal_type robot_goal;





  typedef boost::shared_ptr< ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator> const> ConstPtr;

}; // struct jakacontrollerGoal_

typedef ::jaka_moveit_action::jakacontrollerGoal_<std::allocator<void> > jakacontrollerGoal;

typedef boost::shared_ptr< ::jaka_moveit_action::jakacontrollerGoal > jakacontrollerGoalPtr;
typedef boost::shared_ptr< ::jaka_moveit_action::jakacontrollerGoal const> jakacontrollerGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator1> & lhs, const ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator2> & rhs)
{
  return lhs.point_count == rhs.point_count &&
    lhs.robot_goal == rhs.robot_goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator1> & lhs, const ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jaka_moveit_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1267157bce955f9c70f78d5247a3d8c7";
  }

  static const char* value(const ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1267157bce955f9cULL;
  static const uint64_t static_value2 = 0x70f78d5247a3d8c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jaka_moveit_action/jakacontrollerGoal";
  }

  static const char* value(const ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"int16 point_count\n"
"float32[] robot_goal\n"
;
  }

  static const char* value(const ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point_count);
      stream.next(m.robot_goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct jakacontrollerGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jaka_moveit_action::jakacontrollerGoal_<ContainerAllocator>& v)
  {
    s << indent << "point_count: ";
    Printer<int16_t>::stream(s, indent + "  ", v.point_count);
    s << indent << "robot_goal[]" << std::endl;
    for (size_t i = 0; i < v.robot_goal.size(); ++i)
    {
      s << indent << "  robot_goal[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.robot_goal[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // JAKA_MOVEIT_ACTION_MESSAGE_JAKACONTROLLERGOAL_H
